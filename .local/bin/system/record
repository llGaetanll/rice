#!/bin/sh

# Recordings directory
REC_DIR="$HOME/files/videos/recordings"

# Raw files go here
RAW_DIR="$REC_DIR/raw"

# Compressed files go here
CMP_DIR="$REC_DIR/compressed"

stop_recording() {
    read -r recpid filepath < /tmp/recordingpid

	# kill with SIGTERM, allowing finishing touches.
	kill -15 "$recpid"
	rm -f /tmp/recordingpid

	# even after SIGTERM, ffmpeg may still run, so SIGKILL it.
	sleep 3
	kill -9 "$recpid"

    # In case the user wants to rename the file
    prompt_rename_file

    # Compress the file
    compress_file

    exit
}

# Which kind of recording is this?
prompt_recording() {
	choice=$(printf "video\\ngif\\naudio" | dm -i -p "Recording Style")

	case "$choice" in
		video) 
            {
                prompt_capture_style
                record_video
            }
            ;;
		gif) 
            {
                prompt_capture_style
                record_gif
            }
            ;;
		audio)
            {
                record_audio
            }
            ;;
	esac
}

# Creates variables x y w h for the visual selection chosen by the user.
prompt_capture_style() {
	choice=$(printf "Current Window\\nSelection\\nEntire Screen" | dm -i -p "Capture Style")
	case "$choice" in
		"Current Window") 
            {
                xdotool getactivewindow getwindowgeometry --shell \
              | tr '\n' ' ' \
              | sed -n 's/.*X=\([0-9]*\).*Y=\([0-9]*\).*WIDTH=\([0-9]*\).*HEIGHT=\([0-9]*\).*/\1 \2 \3 \4/p' \
              > /tmp/dims

                read -r x y w h < /tmp/dims
                rm /tmp/dims
            }
            ;;
		"Selection")
            {
                slop -f "%x %y %w %h" > /tmp/dims
                read -r x y w h < /tmp/dims
                rm /tmp/dims
            }
            ;;
		"Entire Screen") 
            {
                x=0
                y=0
                xdpyinfo | grep dimensions | awk '{print $2}' | sed 's/x/ /' > /tmp/dims

                read -r w h < /tmp/dims
                rm /tmp/dims
            }
            ;;
	esac
}

prompt_rename_file() {
	choice=$(printf "Yes\\nNo" | dm -i -p "Rename Recording?")
	case "$choice" in
		"Yes") 
            {
                newfilename=$(dm -p "Rename" < /dev/null)

                fileext="${filepath##*.}"
                filedir=$(dirname "$filepath")
                newfilepath="$filedir/$newfilename.$fileext"

                mv "$filepath" "$newfilepath"

                filepath="$newfilepath"
            }
            ;;
		"No") : ;;
	esac
}

# Record video using ffmpeg. Expects $x $y $w $h to be defined.
record_video() {
    # Create the raw dir if it doesn't already exist
    mkdir -p "$RAW_DIR"

    filename="rec_$(date '+%Y-%m-%d_%H:%M:%S').mp4"
    filepath="$RAW_DIR/$filename"

    echo "x: $x, y: $y, w: $w, h: $h"
    echo "Recording to: $filepath"

    framerate=24

    ffmpeg -y \
    -f x11grab \
    -framerate "$framerate" \
	-video_size "$w"x"$h" \
	-i :0.0+"$x,$y" \
    -r "$framerate" \
    -c:v h264 -crf 0 -preset ultrafast -c:a aac \
    "$filepath" &

	echo "$! $filepath" > /tmp/recordingpid
}

record_gif() {
    # Create the raw dir if it doesn't already exist
    mkdir -p "$RAW_DIR"

    filename="rec_$(date '+%Y-%m-%d_%H:%M:%S').gif"
    filepath="$RAW_DIR/$filename"

    echo "Recording to: $filepath"

    framerate=10

    ffmpeg -y \
    -f x11grab \
    -framerate "$framerate" \
	-video_size "$w"x"$h" \
	-i :0.0+"$x,$y" \
    -r "$framerate" \
    "$filepath" &

	echo "$! $filepath" > /tmp/recordingpid
}

record_audio() {
    # Create the raw dir if it doesn't already exist
    mkdir -p "$RAW_DIR"

    filename="rec_$(date '+%Y-%m-%d_%H:%M:%S').flac"
    filepath="$RAW_DIR/$filename"

    echo "Recording to: $filepath"

	ffmpeg \
	-f alsa -i default \
	-c:a flac \
	"$filepath" &

	echo "$! $filepath" > /tmp/recordingpid
}

compress_file() {
    if [ -z "$filepath" ]; then
        echo "filepath needs to be defined to compress the file"

        return 1
    fi

    # Create the compressed dir if it doesn't already exist
    mkdir -p "$CMP_DIR"

    # Get the file extension to figure out what kind of recording this was
    fileext="${filepath##*.}"

    # Path of the compressed file
    filename=$(basename "$filepath")
    filepathcmp="$CMP_DIR/$filename"

    case "$fileext" in
        "mp4")
            {
                echo "Compressing $filepath -> $filepathcmp"

                ffmpeg \
                -i "$filepath" \
                -c:v libx264 \
                -crf 23 \
                -preset medium \
                -c:a aac \
                -b:a 128k \
                "$filepathcmp"
            }
            ;;
        "gif")
            {
                echo "Compressing $filepath -> $filepathcmp"

                ffmpeg \
                -i "$filepath" \
                -c:v libx264 \
                -crf 23 \
                -preset medium \
                "$filepathcmp"
            }
            ;;
        "flac")
            {
                echo "TODO: Support flac compression"
            }
            ;;
        *)
            {
                echo "Unrecognized file extension '$fileext'"
            }
            ;;
    esac
}

[ -f /tmp/recordingpid ] && stop_recording && exit || prompt_recording
